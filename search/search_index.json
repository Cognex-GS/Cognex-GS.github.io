{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to COGNEX GSS Technical Blog Contact Info: alex.choi@cognex.com","title":"Home"},{"location":"#welcome-to-cognex-gss-technical-blog","text":"Contact Info: alex.choi@cognex.com","title":"Welcome to COGNEX GSS Technical Blog"},{"location":"posts/deep-learning/how-to-run-par-runtime/","text":"Written by Alex Choi, Oct. 14, 2020. Basic Environment Visual Studio 2019","title":"How to Run PAR Runtime"},{"location":"posts/deep-learning/how-to-run-par-runtime/#basic-environment","text":"Visual Studio 2019","title":"Basic Environment"},{"location":"posts/deep-learning/setting-up-par-runtime-env/","text":"Written by Alex Choi, Oct. 13, 2020. Basic Environment Visual Studio 2019 Git NOTE: PAR runtime build requires Visual Studio 2019(VS2019). If you don't have license of VS2019, then you should get it from IT support. Clone PAR github repository Make sure that Git is installed on your system. Then in a command line tool, type the following to clone PAR github repository: git clone https://github.com/sualab/Par.git If you have no access right to the repository, contact Kiyoung.Song@cognex.com Download OpenCV Download OpenCV Windows release from OpenCV.org Download LibTorch C++ from pytorch.org Choose the CUDA toolkit version corresponding to your CUDA toolkit environment. Downloading LibTorch C++ Download both Release version and Debug version of LibTorch. Register Environment Variables For convenience of development environment of PAR , it's very useful to register environment variables for OpenCV and LibTorch. Open Edit the system environment variables on your Windows. System property window for environment variables Register LIBTORCH_1_6_0_CUDA_10_1_PATH for LibTorch release version (Change CUDA toolkit version if necessary). Variable name: LIBTORCH_1_6_0_CUDA_10_1_PATH Variable value: {PATH_TO_LIBTORCH}\\libtorch-win-shared-with-deps-1.6.0+cu101\\libtorch\\ Register LIBTORCH_1_6_0_CUDA_10_1_PATH for LibTorch release version (Change CUDA toolkit version if necessary). Variable name: LIBTORCH_1_6_0_CUDA_10_1_PATH Variable value: {PATH_TO_LIBTORCH}\\libtorch-win-shared-with-deps-1.6.0+cu101\\libtorch\\","title":"How to Set Up PAR Runtime Development Environment"},{"location":"posts/deep-learning/setting-up-par-runtime-env/#basic-environment","text":"Visual Studio 2019 Git NOTE: PAR runtime build requires Visual Studio 2019(VS2019). If you don't have license of VS2019, then you should get it from IT support.","title":"Basic Environment"},{"location":"posts/deep-learning/setting-up-par-runtime-env/#clone-par-github-repository","text":"Make sure that Git is installed on your system. Then in a command line tool, type the following to clone PAR github repository: git clone https://github.com/sualab/Par.git If you have no access right to the repository, contact Kiyoung.Song@cognex.com","title":"Clone PAR github repository"},{"location":"posts/deep-learning/setting-up-par-runtime-env/#download-opencv","text":"Download OpenCV Windows release from OpenCV.org","title":"Download OpenCV"},{"location":"posts/deep-learning/setting-up-par-runtime-env/#download-libtorch-c-from-pytorchorg","text":"Choose the CUDA toolkit version corresponding to your CUDA toolkit environment. Downloading LibTorch C++ Download both Release version and Debug version of LibTorch.","title":"Download LibTorch C++ from pytorch.org"},{"location":"posts/deep-learning/setting-up-par-runtime-env/#register-environment-variables","text":"For convenience of development environment of PAR , it's very useful to register environment variables for OpenCV and LibTorch. Open Edit the system environment variables on your Windows. System property window for environment variables Register LIBTORCH_1_6_0_CUDA_10_1_PATH for LibTorch release version (Change CUDA toolkit version if necessary). Variable name: LIBTORCH_1_6_0_CUDA_10_1_PATH Variable value: {PATH_TO_LIBTORCH}\\libtorch-win-shared-with-deps-1.6.0+cu101\\libtorch\\ Register LIBTORCH_1_6_0_CUDA_10_1_PATH for LibTorch release version (Change CUDA toolkit version if necessary). Variable name: LIBTORCH_1_6_0_CUDA_10_1_PATH Variable value: {PATH_TO_LIBTORCH}\\libtorch-win-shared-with-deps-1.6.0+cu101\\libtorch\\","title":"Register Environment Variables"},{"location":"posts/deep-learning/setting-up-pytorch-centernet-dev-env/","text":"Written by Alex Choi, Oct. 8, 2020. Basic Environment Anaconda Git Creating CONDA Environment Run a command line tool, i.e. Anaconda Prompt and type the following command: conda create -n centernet python=3.7 NOTE: Python 3.8 not tested yet. But you can try if you want. Activate centernet Anaconda environment: conda activate centernet Installing Python Packages Install pytorch(ver.1.4) and torchvision based on your cudatoolkit version. conda install pytorch=1.4 torchvision cudatoolkit=10.1 -c pytorch NOTE: CenterNet build didn't work with pytorch version 1.5 or 1.6. NOTE: cudatoolkit version 10.2 not tested yet. Install necessary python packages: python -m pip install opencv-python Cython numba progress matplotlib easydict scipy Downloading CenterNet.zip from NAS Navigate to the following path to download CenterNet.zip from NAS. \\\\10.99.160.32\\COI_images\\Research\\GSS\\CenterNet.zip Building cocoapi Tools Clone cocoapi tools git repository to any path where you want git clone https://github.com/cocodataset/cocoapi.git Open cocoapi/PythonAPI/setup.py using a text editor and modify the following line: extra_compile_args=['-Wno-cpp', '-Wno-unused-function', '-std=c99'] to extra_compile_args={'gcc': ['/Qstd=c99']}, In the command line tool move to the following path: cd cocoapi/PythonAPI Build cocoapi tools: python setup.py build_ext install Modifying cpp_extension.py Using a text editor open up C:/ProgramData/Anaconda3/envs/centernet/Lib/site-packages/torch/utils/cpp_extension.py and modify the following line: match = re.search(r'(\\d+)\\.(\\d+)\\.(\\d+)', compiler_info.decode().strip()) to match = re.search(r'(\\d+)\\.(\\d+)\\.(\\d+)', compiler_info.decode(\"utf8\", \"ignore\").strip()) Copying and Unzipping CenterNet.zip Copy \"CenterNet.zip\" file to any path you want (maybe COI project folder). Unzip the file using BandiZip or any unzipping software you want. NOTE: You can find more information from the PyTorch CenterNet official repo . Building NMS 'nms' is short for \"Non-Maximum Suppression.\" CenterNet does not usually use Non-Maximum Suppression, but it is sometimes useful. In order to avoid build error comment out the following line after opening CenterNet/src/lib/external/setup.py up using a text editor. #extra_compile_args=[\"-Wno-cpp\", \"-Wno-unused-function\"] NOTE: The line above may be already commented out actually. Build nms with the following command line: python setup.py build_ext --inplace NOTE: You can find more information about building nms here . Building DCNv2 Move to the following path in your CenterNet path: cd CenterNet/src/lib/models/networks/DCNv2/ Build DCNv2 using the following command line (this may take some time to finish building): python setup.py build develop NOTE: You can find more information about DCNv2 here . Test with Pre-trained Models Unzip \"ImageNet-Weights.zip\" and copy all the contained files (ImageNet pre-trained models) to C:\\Users\\{WINDOWS_USER_ACCOUNT_NAME}\\.cache\\torch\\checkpoints\\ . Unzip \"Centernet-Models.zip\" and copy all the contained files to CenterNet/models/ . Finally, test with some COI images using the following command line: python demo.py ctdet --demo ../data/COI/images/image_0001.jpg --load_model ../exp/ctdet/COI/model_best.pth python demo.py ctdet --demo ../data/COI/images/image_0002.jpg --load_model ../exp/ctdet/COI/model_best.pth python demo.py ctdet --demo ../data/COI/images/image_0003.jpg --load_model ../exp/ctdet/COI/model_best.pth Simple Trial for Training If you are using CenterNet.zip you can find the training information for COI from CenterNet/exp/ctdet/COI/ . There are 2 options for training: One is training from scratch (random initialization). python main.py ctdet --exp_id COI --batch_size 16 --lr 1.25e-4 --gpus 0 --load_model ../models/ctdet_coco_resdcn18.pth --resume False The other is resume training from pre-trained model. python main.py ctdet --exp_id COI --batch_size 16 --lr 1.25e-4 --gpus 0 --load_model ../models/ctdet_coco_resdcn18.pth --resume True Checking Training Information You can check your training information such as loss history, accuracy history and so on using TensorBoard . You can find your training information for COI from the path, CenterNet/exp/ctdet/COI/ Install tensorboard using the following command line: python -m pip install tensorboard Finally, install tensorboardX using the following command line: python -m pip install tensorboardX To open your training information in your web browser using tensorboard, type the following command line: tensorboard --logdir {CenterNet_ROOT}/exp/ctdet/COI","title":"How to Set Up PyTorch CenterNet Development Environment"},{"location":"posts/deep-learning/setting-up-pytorch-centernet-dev-env/#basic-environment","text":"Anaconda Git","title":"Basic Environment"},{"location":"posts/deep-learning/setting-up-pytorch-centernet-dev-env/#creating-conda-environment","text":"Run a command line tool, i.e. Anaconda Prompt and type the following command: conda create -n centernet python=3.7 NOTE: Python 3.8 not tested yet. But you can try if you want. Activate centernet Anaconda environment: conda activate centernet","title":"Creating CONDA Environment"},{"location":"posts/deep-learning/setting-up-pytorch-centernet-dev-env/#installing-python-packages","text":"Install pytorch(ver.1.4) and torchvision based on your cudatoolkit version. conda install pytorch=1.4 torchvision cudatoolkit=10.1 -c pytorch NOTE: CenterNet build didn't work with pytorch version 1.5 or 1.6. NOTE: cudatoolkit version 10.2 not tested yet. Install necessary python packages: python -m pip install opencv-python Cython numba progress matplotlib easydict scipy","title":"Installing Python Packages"},{"location":"posts/deep-learning/setting-up-pytorch-centernet-dev-env/#downloading-centernetzip-from-nas","text":"Navigate to the following path to download CenterNet.zip from NAS. \\\\10.99.160.32\\COI_images\\Research\\GSS\\CenterNet.zip","title":"Downloading CenterNet.zip from NAS"},{"location":"posts/deep-learning/setting-up-pytorch-centernet-dev-env/#building-cocoapi-tools","text":"Clone cocoapi tools git repository to any path where you want git clone https://github.com/cocodataset/cocoapi.git Open cocoapi/PythonAPI/setup.py using a text editor and modify the following line: extra_compile_args=['-Wno-cpp', '-Wno-unused-function', '-std=c99'] to extra_compile_args={'gcc': ['/Qstd=c99']}, In the command line tool move to the following path: cd cocoapi/PythonAPI Build cocoapi tools: python setup.py build_ext install","title":"Building cocoapi Tools"},{"location":"posts/deep-learning/setting-up-pytorch-centernet-dev-env/#modifying-cpp_extensionpy","text":"Using a text editor open up C:/ProgramData/Anaconda3/envs/centernet/Lib/site-packages/torch/utils/cpp_extension.py and modify the following line: match = re.search(r'(\\d+)\\.(\\d+)\\.(\\d+)', compiler_info.decode().strip()) to match = re.search(r'(\\d+)\\.(\\d+)\\.(\\d+)', compiler_info.decode(\"utf8\", \"ignore\").strip())","title":"Modifying cpp_extension.py"},{"location":"posts/deep-learning/setting-up-pytorch-centernet-dev-env/#copying-and-unzipping-centernetzip","text":"Copy \"CenterNet.zip\" file to any path you want (maybe COI project folder). Unzip the file using BandiZip or any unzipping software you want. NOTE: You can find more information from the PyTorch CenterNet official repo .","title":"Copying and Unzipping CenterNet.zip"},{"location":"posts/deep-learning/setting-up-pytorch-centernet-dev-env/#building-nms","text":"'nms' is short for \"Non-Maximum Suppression.\" CenterNet does not usually use Non-Maximum Suppression, but it is sometimes useful. In order to avoid build error comment out the following line after opening CenterNet/src/lib/external/setup.py up using a text editor. #extra_compile_args=[\"-Wno-cpp\", \"-Wno-unused-function\"] NOTE: The line above may be already commented out actually. Build nms with the following command line: python setup.py build_ext --inplace NOTE: You can find more information about building nms here .","title":"Building NMS"},{"location":"posts/deep-learning/setting-up-pytorch-centernet-dev-env/#building-dcnv2","text":"Move to the following path in your CenterNet path: cd CenterNet/src/lib/models/networks/DCNv2/ Build DCNv2 using the following command line (this may take some time to finish building): python setup.py build develop NOTE: You can find more information about DCNv2 here .","title":"Building DCNv2"},{"location":"posts/deep-learning/setting-up-pytorch-centernet-dev-env/#test-with-pre-trained-models","text":"Unzip \"ImageNet-Weights.zip\" and copy all the contained files (ImageNet pre-trained models) to C:\\Users\\{WINDOWS_USER_ACCOUNT_NAME}\\.cache\\torch\\checkpoints\\ . Unzip \"Centernet-Models.zip\" and copy all the contained files to CenterNet/models/ . Finally, test with some COI images using the following command line: python demo.py ctdet --demo ../data/COI/images/image_0001.jpg --load_model ../exp/ctdet/COI/model_best.pth python demo.py ctdet --demo ../data/COI/images/image_0002.jpg --load_model ../exp/ctdet/COI/model_best.pth python demo.py ctdet --demo ../data/COI/images/image_0003.jpg --load_model ../exp/ctdet/COI/model_best.pth","title":"Test with Pre-trained Models"},{"location":"posts/deep-learning/setting-up-pytorch-centernet-dev-env/#simple-trial-for-training","text":"If you are using CenterNet.zip you can find the training information for COI from CenterNet/exp/ctdet/COI/ . There are 2 options for training: One is training from scratch (random initialization). python main.py ctdet --exp_id COI --batch_size 16 --lr 1.25e-4 --gpus 0 --load_model ../models/ctdet_coco_resdcn18.pth --resume False The other is resume training from pre-trained model. python main.py ctdet --exp_id COI --batch_size 16 --lr 1.25e-4 --gpus 0 --load_model ../models/ctdet_coco_resdcn18.pth --resume True","title":"Simple Trial for Training"},{"location":"posts/deep-learning/setting-up-pytorch-centernet-dev-env/#checking-training-information","text":"You can check your training information such as loss history, accuracy history and so on using TensorBoard . You can find your training information for COI from the path, CenterNet/exp/ctdet/COI/ Install tensorboard using the following command line: python -m pip install tensorboard Finally, install tensorboardX using the following command line: python -m pip install tensorboardX To open your training information in your web browser using tensorboard, type the following command line: tensorboard --logdir {CenterNet_ROOT}/exp/ctdet/COI","title":"Checking Training Information"}]}